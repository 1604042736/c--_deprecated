@subheader"""
from SyntaxTrees import *

def get_var_def_list(a,b,c):
    result={'names':[a],'values':[b if b else None]}
    if c:
        for i in c:
            result['names'].append(i[0])
            result['values'].append(i[1])
    return result
"""

start :a=[sentences] ENDMARKER {Program(body=a if a else [])}

body: NEWLINE INDENT a=sentences DEDENT {a}

sentences:sentence*

sentence:
    | a=statement NEWLINE {a}
    | statement

statement:
    | &'if' if_sentence
    | &'while' while_sentence
    | &'return' return_sentence
    | &'extern' extern_sentence
    | 'pass' {Pass()}
    | function
    | call
    | assign
    | define

defs:
    | struct_def
    | function_def
    | var_def

define:
    | a=defs NEWLINE {a}
    | defs

defines:define+

def_list:
    | NEWLINE INDENT a=defines DEDENT {a}

extern_sentence:
    | 'extern' ':' a=def_list {Extern(extern=a)}
    | 'extern' a=define {Extern(extern=[a])}

return_sentence:'return' a=expression {Return(value=a)}

while_sentence:'while' a=expression ':' b=body {While(exp=a,body=b)}

function:
    | a=type b=NAME '(' c=[arg_def_list] ')' ':' d=body {Function(type=a,name=b.string,args=c if c else [],body=d)}
    | function_def

function_def:a=type b=NAME '(' c=[arg_def_list] ')' {Function(type=a,name=b.string,args=c if c else [])}

if_sentence:'if' a=expression ':' b=body c=[elif_sentence] {If(exp=a,body=b,orelse=c)}

elif_sentence:
    | 'elif' a=expression ':' b=body c=[elif_sentence] {If(exp=a,body=b,orelse=c)}
    | else_sentence

else_sentence:'else' ':' a=body {a}

basic_type:
    | 'int' {Int()}
    | 'void' {Void()}
    | 'char' {Char()}

pointer_type:a=single_type b='*'+ {Pointer(type=a,level=len(b))}

single_type:
    | basic_type
    | struct_type

mult_type:
    | pointer_type
    | single_type

array_type:a=mult_type b=array_dimen+ {Array(type=a,dimen=b)}

array_dimen:'[' a=NUMBER ']' {a.string}

struct_type:'struct' a=NAME {Struct(name=a.string)}

type:
    | array_type
    | mult_type

struct_def:'struct' a=NAME ':' b=body {StructDef(name=a.string,defs=b)}

var_def:a=type b=NAME c=[default] d=var_def_more* {VarDef(type=a,**get_var_def_list(b.string,c,d))}

var_def_more:',' a=NAME b=[default] {(a.string,b if b else None)}

arg_def:
    | a=type b=NAME c=[default] {ArgDef(type=a,name=b.string,default=c if c else None)}
    | '...' {More()}

default:'=' a=expression {a}

assign:a=assign_exp '=' c=expression {Assign(targets=[a],value=c)}

assign_more:'=' a=expression {a}

assign_exp:
    | a='*'+ b=assign_exp {UnpackRef(exp=b,level=len(a),LOCATIONS)}
    | a=t_primary '[' b=expression ']' !t_lookahead{Subscript(value=a,slice=b,mode=Store(),LOCATIONS)}
    | a=t_primary '.' b=NAME !t_lookahead{Attribute(value=a,attr=b.string,mode=Store())}
    | call !t_lookahead
    | a=NAME {Name(id=a.string,mode=Store())}

t_primary:
    | a=t_primary '.' b=NAME &t_lookahead {Attribute(value=a,attr=b.string,mode=Load())}
    | a=t_primary '[' b=expression ']' &t_lookahead {Subscript(value=a,slice=b,mode=Load())}
    | a=NAME &t_lookahead {Name(id=a.string,mode=Load())}

t_lookahead: '(' | '[' | '.'

expression:or_exp

or_exp:
    | a=and_exp b=('or' and_exp)+ {BoolOp(op=Or(),values=[a]+[i[1]for i in b])}
    | and_exp

and_exp:
    | a=bitor_exp b=('and' bitor_exp)+ {BoolOp(op=And(),values=[a]+[i[1] for i in b])}
    | bitor_exp

bitor_exp:
    | a=bitor_exp '|' b=bitxor_exp {BinOp(left=a,op=BitOr(),right=b)}
    | bitxor_exp

bitxor_exp:
    | a=bitxor_exp '^' b=bitand_exp {BinOp(left=a,op=BitXor(),right=b)}
    | bitand_exp

bitand_exp:
    | a=bitand_exp '&' b=compare_exp {BinOp(left=a,op=BitAnd(),right=b)}
    | compare_exp

compare_exp:
    | a=shift_exp b=compares {Compare(left=a,ops=[i for i,j in b],values=[j for i,j in b])}
    | shift_exp

compares:compare+

compare:
    | '<' a=shift_exp {(Lt(),a)}
    | '<=' a=shift_exp {(Leq(),a)}
    | '>' a=shift_exp {(Gt(),a)}
    | '>=' a=shift_exp {(Geq(),a)}
    | '==' a=shift_exp {(Eq(),a)}
    | '!=' a=shift_exp {(Neq(),a)}

shift_exp:
    | a=shift_exp '<<' b=add_exp {BinOp(left=a,op=RShift(),right=b)}
    | a=shift_exp '>>' b=add_exp {BinOp(left=a,op=LShift(),right=b)}
    | add_exp

add_exp:
    | a=add_exp '+' b=mul_exp {BinOp(left=a,op=Add(),right=b)}
    | a=add_exp '-' b=mul_exp {BinOp(left=a,op=Sub(),right=b)}
    | mul_exp

mul_exp:
    | a=mul_exp '*' b=prefix_exp {BinOp(left=a,op=Mul(),right=b)}
    | a=mul_exp '/' b=prefix_exp {BinOp(left=a,op=Div(),right=b)}
    | a=mul_exp '%' b=prefix_exp {BinOp(left=a,op=Mod(),right=b)}
    | prefix_exp

prefix_exp:
    | '&' a=postfix_exp {Address(exp=a)}
    | a='*'+ b=postfix_exp {UnpackRef(exp=b,level=len(a),LOCATIONS)}
    | postfix_exp

postfix_exp:
    | a=postfix_exp '[' b=expression ']' {Subscript(value=a,slice=b,mode=Load(),LOCATIONS)}
    | call
    | a=postfix_exp '.' b=NAME {Attribute(value=a,attr=b.string,mode=Load())}
    | primary_exp

call:a=NAME '(' b=[arg_exp_list] ')' {Call(func=a.string,args=b if b else [],LOCATIONS)}

arg_def_list:a=arg_def b=arg_def_more* {[a]+b if b else [a]}

arg_def_more:',' a=arg_def {a}

arg_exp_list:a=expression b=arg_exp_more* {[a]+b if b else [a]}

arg_exp_more:',' a=expression {a}

primary_exp:
    | NAME {Name(id=name.string,mode=Load())}
    | STRING {String(value=string.string[1:-1])}
    | NUMBER {Num(value=number.string)}
    | '(' a=expression ')' {a}