typedef unsigned long long size_t;
typedef unsigned long long uint64_t;
extern void* realloc(void*,size_t);
extern char* strcat(char*,char*);
extern char* strrchr(char*,char);
extern char* strncpy(char*,char*,int);
extern void*malloc(size_t);
extern size_t strlen(char*);

char *empty_string()
{
    char *s = (char *)malloc(sizeof(char));
    s[0] = '\0';
    return s;
}

/*在原字符串上添加字符*/
char *add_char(char *str, char ch)
{
    size_t n = strlen(str) + 1; // 包括\0
    str = (char *)realloc(str, n + 1);
    str[n - 1] = ch;
    str[n] = '\0';
    return str;
}

char *add_string(char *s1, char *s2)
{
    size_t n = strlen(s1) + strlen(s2) + 1;
    s1 = (char *)realloc(s1, n + 1);
    strcat(s1, s2);
    s1[n] = '\0';
    return s1;
}

char *repr(char *s)
{
    char *p = empty_string();
    p = add_char(p, '"');
    while ((*s) != '\0')
    {
        switch (*s)
        {
        case '"': p = add_string(p, "\\\""); break;
        case '\\': p = add_string(p, "\\\\"); break;
        case '\a': p = add_string(p, "\\a"); break;
        case '\b': p = add_string(p, "\\b"); break;
        case '\f': p = add_string(p, "\\f"); break;
        case '\n': p = add_string(p, "\\n"); break;
        case '\r': p = add_string(p, "\\r"); break;
        case '\t': p = add_string(p, "\\t"); break;
        case '\v': p = add_string(p, "\\b"); break;
        default: p = add_char(p, *s);
        }
        s++;
    }
    p = add_char(p, '"');
    return p;
}

char *from_uint64(uint64_t val)
{
    char buf[21];
    for (int i = 0; val != 0;)
    {
        buf[i++] = val % 10;
        val /= 10;
        buf[i] = '\0';
    }
    char *s = empty_string();
    for (uint64_t i = strlen(buf) - 1; i < strlen(buf); i--)
        s = add_char(s, '0' + buf[i]);
    return s;
}

char *path_get_basename(char *path)
{
    char *t = strrchr(path, '/');
    char *basename = (char *)malloc(t - path + 1);
    strncpy(basename, path, t - path);
    basename[t - path] = '\0';
    return basename;
}

char *path_join(char *p1, char *p2)
{
    char *s = empty_string();
    s = add_string(s, p1);
    s = add_char(s, '/');
    s = add_string(s, p2);
    return s;
}

unsigned long long string_hash(char *s)
{
    unsigned long long hash = 0;
    unsigned long long seed = 17;
    while (*s != '\0')
    {
        hash = hash * seed + *s;
        s++;
    }
    return hash;
}